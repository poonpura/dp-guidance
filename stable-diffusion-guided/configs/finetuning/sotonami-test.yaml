data:
  params:
    batch_size: 8
    num_workers: 1
    train:
      params:
        size: 256
      target: ldm.data.sotonami.IshidaSuiTrain
    validation:
      params:
        size: 256
      target: ldm.data.sotonami.IshidaSuiVal
    wrap: false
  target: main.DataModuleFromConfig
lightning:
  callbacks:
    image_logger:
      params:
        batch_frequency: 5000
        increase_log_steps: false
        max_images: 8
      target: main.ImageLogger
  trainer:
    benchmark: true
    max_epochs: 250
model:
  base_learning_rate: 1.0e-3
  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    ckpt_path:  /lfs/skampere1/0/pura/models/v1-5-pruned.ckpt
    linear_start: 0.00085
    linear_end: 0.0120
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    first_stage_key: image
    cond_stage_key: caption
    image_size: 64
    channels: 4
    cond_stage_trainable: false   # Note: different from the one we trained before
    conditioning_key: crossattn
    dp_config:
      delta: 1.0e-03
      enabled: true
      epsilon: 10
      max_batch_size: 4
      max_grad_norm: 1.0
      poisson_sampling: true
    monitor: val/loss_simple_ema
    scale_factor: 0.18215
    use_ema: False

    scheduler_config: # 10000 warmup steps
      target: ldm.lr_scheduler.LambdaLinearScheduler
      params:
        warm_up_steps: [ 10000 ]
        cycle_lengths: [ 10000000000000 ] # incredibly large number to prevent corner cases
        f_start: [ 1.e-6 ]
        f_max: [ 1. ]
        f_min: [ 1. ]

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        image_size: 32 # unused
        in_channels: 4
        out_channels: 4
        model_channels: 320
        attention_resolutions: [ 4, 2, 1 ]
        num_res_blocks: 2
        channel_mult: [ 1, 2, 4, 4 ]
        num_heads: 8
        use_spatial_transformer: True
        transformer_depth: 1
        context_dim: 768
        use_checkpoint: True
        legacy: False

    first_stage_config:
      target: ldm.models.autoencoder.AutoencoderKL
      params:
        embed_dim: 4
        monitor: val/rec_loss
        ddconfig:
          double_z: true
          z_channels: 4
          resolution: 256
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult:
          - 1
          - 2
          - 4
          - 4
          num_res_blocks: 2
          attn_resolutions: []
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity

    cond_stage_config:
      target: ldm.modules.encoders.modules.FrozenCLIPEmbedder